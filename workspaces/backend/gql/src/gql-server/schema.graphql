type Asset {
  createdAt: TemporalInstant!
  description: String
  id: ID!
  images: [Image!]!
  name: String!
  proofOfPurchase: Document
  updatedAt: TemporalInstant!
}

type AssetError implements Error {
  message: String!
}

union AssetResponse = Asset | AssetError

input CreateAssetInput {
  description: String
  images: [CreateImageInput!]
  name: String!
  proofOfPurchase: CreateDocumentInput
}

input CreateDocumentInput {
  file: CreateFileInput!
}

input CreateFileInput {
  buffer: Uint8Array!
  filename: String!
  mimeType: String!
}

input CreateImageInput {
  description: String
  file: CreateFileInput!
  name: String
}

type Document {
  asset: Asset!
  createdAt: TemporalInstant!
  file: File!
  id: ID!
}

interface Error {
  message: String!
}

type File {
  buffer: Uint8Array!
  createdAt: TemporalInstant!
  filename: String!
  id: ID!
  mimeType: String!
}

type Image {
  asset: Asset!
  createdAt: TemporalInstant!
  description: String
  file: File!
  id: ID!
  name: String
  updatedAt: TemporalInstant!
}

type ImageError implements Error {
  message: String!
}

union ImageResponse = Image | ImageError

type Mutation {
  addAssetImages(id: ID!, images: [CreateImageInput!]!): AssetResponse!
  createAsset(data: CreateAssetInput!): AssetResponse!
  deleteAsset(id: ID!): Void
  deleteAssetImages(id: ID!, imageIds: [ID!]): AssetResponse!
  deleteProofOfPurchase(id: ID!): AssetResponse!
  replaceProofOfPurchase(
    id: ID!
    proofOfPurchase: CreateDocumentInput!
  ): AssetResponse!
  updateAsset(data: UpdateAssetInput!): AssetResponse!
  updateImage(data: UpdateImageInput!): ImageResponse!
}

type Query {
  asset(id: ID!): AssetResponse!
  assets: [AssetResponse!]!
}

scalar TemporalInstant

scalar Uint8Array

input UpdateAssetInput {
  description: String
  id: ID!
  name: String
}

input UpdateImageInput {
  description: String
  id: ID!
  name: String
  previousImageId: ID
}

scalar Void
